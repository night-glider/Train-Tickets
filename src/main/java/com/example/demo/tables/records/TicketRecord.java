/*
 * This file is generated by jOOQ.
 */
package com.example.demo.tables.records;


import com.example.demo.tables.Ticket;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TicketRecord extends UpdatableRecordImpl<TicketRecord> implements Record4<Integer, Integer, Boolean, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.ticket.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.ticket.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.ticket.trip_id</code>.
     */
    public void setTripId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.ticket.trip_id</code>.
     */
    public Integer getTripId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.ticket.canceled</code>.
     */
    public void setCanceled(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.ticket.canceled</code>.
     */
    public Boolean getCanceled() {
        return (Boolean) get(2);
    }

    /**
     * Setter for <code>public.ticket.passenger_name</code>.
     */
    public void setPassengerName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.ticket.passenger_name</code>.
     */
    public String getPassengerName() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Boolean, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, Integer, Boolean, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Ticket.TICKET.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Ticket.TICKET.TRIP_ID;
    }

    @Override
    public Field<Boolean> field3() {
        return Ticket.TICKET.CANCELED;
    }

    @Override
    public Field<String> field4() {
        return Ticket.TICKET.PASSENGER_NAME;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getTripId();
    }

    @Override
    public Boolean component3() {
        return getCanceled();
    }

    @Override
    public String component4() {
        return getPassengerName();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getTripId();
    }

    @Override
    public Boolean value3() {
        return getCanceled();
    }

    @Override
    public String value4() {
        return getPassengerName();
    }

    @Override
    public TicketRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public TicketRecord value2(Integer value) {
        setTripId(value);
        return this;
    }

    @Override
    public TicketRecord value3(Boolean value) {
        setCanceled(value);
        return this;
    }

    @Override
    public TicketRecord value4(String value) {
        setPassengerName(value);
        return this;
    }

    @Override
    public TicketRecord values(Integer value1, Integer value2, Boolean value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TicketRecord
     */
    public TicketRecord() {
        super(Ticket.TICKET);
    }

    /**
     * Create a detached, initialised TicketRecord
     */
    public TicketRecord(Integer id, Integer tripId, Boolean canceled, String passengerName) {
        super(Ticket.TICKET);

        setId(id);
        setTripId(tripId);
        setCanceled(canceled);
        setPassengerName(passengerName);
        resetChangedOnNotNull();
    }
}
