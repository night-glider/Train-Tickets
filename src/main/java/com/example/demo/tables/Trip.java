/*
 * This file is generated by jOOQ.
 */
package com.example.demo.tables;


import com.example.demo.Keys;
import com.example.demo.Public;
import com.example.demo.tables.records.TripRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Trip extends TableImpl<TripRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.trip</code>
     */
    public static final Trip TRIP = new Trip();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TripRecord> getRecordType() {
        return TripRecord.class;
    }

    /**
     * The column <code>public.trip.id</code>.
     */
    public final TableField<TripRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.trip.train_id</code>.
     */
    public final TableField<TripRecord, Integer> TRAIN_ID = createField(DSL.name("train_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.trip.route_id</code>.
     */
    public final TableField<TripRecord, Integer> ROUTE_ID = createField(DSL.name("route_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.trip.start_time</code>.
     */
    public final TableField<TripRecord, LocalDateTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.trip.end_time</code>.
     */
    public final TableField<TripRecord, LocalDateTime> END_TIME = createField(DSL.name("end_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<TripRecord, Object> PRICE = createField(DSL.name("price"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"money\"").nullable(false), this, "");

    private Trip(Name alias, Table<TripRecord> aliased) {
        this(alias, aliased, null);
    }

    private Trip(Name alias, Table<TripRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.trip</code> table reference
     */
    public Trip(String alias) {
        this(DSL.name(alias), TRIP);
    }

    /**
     * Create an aliased <code>public.trip</code> table reference
     */
    public Trip(Name alias) {
        this(alias, TRIP);
    }

    /**
     * Create a <code>public.trip</code> table reference
     */
    public Trip() {
        this(DSL.name("trip"), null);
    }

    public <O extends Record> Trip(Table<O> child, ForeignKey<O, TripRecord> key) {
        super(child, key, TRIP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TripRecord, Integer> getIdentity() {
        return (Identity<TripRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TripRecord> getPrimaryKey() {
        return Keys.TRIP_PKEY;
    }

    @Override
    public List<ForeignKey<TripRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRIP__TRIP_TRAIN_ID_FKEY, Keys.TRIP__TRIP_ROUTE_ID_FKEY);
    }

    private transient Train _train;
    private transient Route _route;

    /**
     * Get the implicit join path to the <code>public.train</code> table.
     */
    public Train train() {
        if (_train == null)
            _train = new Train(this, Keys.TRIP__TRIP_TRAIN_ID_FKEY);

        return _train;
    }

    /**
     * Get the implicit join path to the <code>public.route</code> table.
     */
    public Route route() {
        if (_route == null)
            _route = new Route(this, Keys.TRIP__TRIP_ROUTE_ID_FKEY);

        return _route;
    }

    @Override
    public Trip as(String alias) {
        return new Trip(DSL.name(alias), this);
    }

    @Override
    public Trip as(Name alias) {
        return new Trip(alias, this);
    }

    @Override
    public Trip as(Table<?> alias) {
        return new Trip(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Trip rename(String name) {
        return new Trip(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trip rename(Name name) {
        return new Trip(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trip rename(Table<?> name) {
        return new Trip(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Integer, LocalDateTime, LocalDateTime, Object> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super Integer, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super Object, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super Integer, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super Object, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
