/*
 * This file is generated by jOOQ.
 */
package com.example.demo.tables;


import com.example.demo.Keys;
import com.example.demo.Public;
import com.example.demo.tables.records.TrainRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Train extends TableImpl<TrainRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.train</code>
     */
    public static final Train TRAIN = new Train();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrainRecord> getRecordType() {
        return TrainRecord.class;
    }

    /**
     * The column <code>public.train.id</code>.
     */
    public final TableField<TrainRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.train.model</code>.
     */
    public final TableField<TrainRecord, String> MODEL = createField(DSL.name("model"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.train.passenger_capacity</code>.
     */
    public final TableField<TrainRecord, Integer> PASSENGER_CAPACITY = createField(DSL.name("passenger_capacity"), SQLDataType.INTEGER.nullable(false), this, "");

    private Train(Name alias, Table<TrainRecord> aliased) {
        this(alias, aliased, null);
    }

    private Train(Name alias, Table<TrainRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.train</code> table reference
     */
    public Train(String alias) {
        this(DSL.name(alias), TRAIN);
    }

    /**
     * Create an aliased <code>public.train</code> table reference
     */
    public Train(Name alias) {
        this(alias, TRAIN);
    }

    /**
     * Create a <code>public.train</code> table reference
     */
    public Train() {
        this(DSL.name("train"), null);
    }

    public <O extends Record> Train(Table<O> child, ForeignKey<O, TrainRecord> key) {
        super(child, key, TRAIN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TrainRecord, Integer> getIdentity() {
        return (Identity<TrainRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TrainRecord> getPrimaryKey() {
        return Keys.TRAIN_PKEY;
    }

    @Override
    public Train as(String alias) {
        return new Train(DSL.name(alias), this);
    }

    @Override
    public Train as(Name alias) {
        return new Train(alias, this);
    }

    @Override
    public Train as(Table<?> alias) {
        return new Train(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Train rename(String name) {
        return new Train(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Train rename(Name name) {
        return new Train(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Train rename(Table<?> name) {
        return new Train(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
