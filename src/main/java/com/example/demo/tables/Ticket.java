/*
 * This file is generated by jOOQ.
 */
package com.example.demo.tables;


import com.example.demo.Keys;
import com.example.demo.Public;
import com.example.demo.tables.records.TicketRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ticket extends TableImpl<TicketRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ticket</code>
     */
    public static final Ticket TICKET = new Ticket();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TicketRecord> getRecordType() {
        return TicketRecord.class;
    }

    /**
     * The column <code>public.ticket.id</code>.
     */
    public final TableField<TicketRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.ticket.trip_id</code>.
     */
    public final TableField<TicketRecord, Integer> TRIP_ID = createField(DSL.name("trip_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.ticket.canceled</code>.
     */
    public final TableField<TicketRecord, Boolean> CANCELED = createField(DSL.name("canceled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.ticket.passenger_name</code>.
     */
    public final TableField<TicketRecord, String> PASSENGER_NAME = createField(DSL.name("passenger_name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    private Ticket(Name alias, Table<TicketRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ticket(Name alias, Table<TicketRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ticket</code> table reference
     */
    public Ticket(String alias) {
        this(DSL.name(alias), TICKET);
    }

    /**
     * Create an aliased <code>public.ticket</code> table reference
     */
    public Ticket(Name alias) {
        this(alias, TICKET);
    }

    /**
     * Create a <code>public.ticket</code> table reference
     */
    public Ticket() {
        this(DSL.name("ticket"), null);
    }

    public <O extends Record> Ticket(Table<O> child, ForeignKey<O, TicketRecord> key) {
        super(child, key, TICKET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TicketRecord, Integer> getIdentity() {
        return (Identity<TicketRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TicketRecord> getPrimaryKey() {
        return Keys.TICKET_PKEY;
    }

    @Override
    public List<ForeignKey<TicketRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TICKET__TICKET_TRIP_ID_FKEY);
    }

    private transient Trip _trip;

    /**
     * Get the implicit join path to the <code>public.trip</code> table.
     */
    public Trip trip() {
        if (_trip == null)
            _trip = new Trip(this, Keys.TICKET__TICKET_TRIP_ID_FKEY);

        return _trip;
    }

    @Override
    public Ticket as(String alias) {
        return new Ticket(DSL.name(alias), this);
    }

    @Override
    public Ticket as(Name alias) {
        return new Ticket(alias, this);
    }

    @Override
    public Ticket as(Table<?> alias) {
        return new Ticket(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ticket rename(String name) {
        return new Ticket(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ticket rename(Name name) {
        return new Ticket(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ticket rename(Table<?> name) {
        return new Ticket(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Boolean, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
