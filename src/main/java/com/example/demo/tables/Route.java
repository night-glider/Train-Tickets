/*
 * This file is generated by jOOQ.
 */
package com.example.demo.tables;


import com.example.demo.Keys;
import com.example.demo.Public;
import com.example.demo.tables.records.RouteRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.YearToSecond;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Route extends TableImpl<RouteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.route</code>
     */
    public static final Route ROUTE = new Route();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RouteRecord> getRecordType() {
        return RouteRecord.class;
    }

    /**
     * The column <code>public.route.id</code>.
     */
    public final TableField<RouteRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.route.start_city</code>.
     */
    public final TableField<RouteRecord, String> START_CITY = createField(DSL.name("start_city"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.route.finish_city</code>.
     */
    public final TableField<RouteRecord, String> FINISH_CITY = createField(DSL.name("finish_city"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.route.trip_time</code>.
     */
    public final TableField<RouteRecord, YearToSecond> TRIP_TIME = createField(DSL.name("trip_time"), SQLDataType.INTERVAL.nullable(false), this, "");

    private Route(Name alias, Table<RouteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Route(Name alias, Table<RouteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.route</code> table reference
     */
    public Route(String alias) {
        this(DSL.name(alias), ROUTE);
    }

    /**
     * Create an aliased <code>public.route</code> table reference
     */
    public Route(Name alias) {
        this(alias, ROUTE);
    }

    /**
     * Create a <code>public.route</code> table reference
     */
    public Route() {
        this(DSL.name("route"), null);
    }

    public <O extends Record> Route(Table<O> child, ForeignKey<O, RouteRecord> key) {
        super(child, key, ROUTE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<RouteRecord, Integer> getIdentity() {
        return (Identity<RouteRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RouteRecord> getPrimaryKey() {
        return Keys.ROUTE_PKEY;
    }

    @Override
    public Route as(String alias) {
        return new Route(DSL.name(alias), this);
    }

    @Override
    public Route as(Name alias) {
        return new Route(alias, this);
    }

    @Override
    public Route as(Table<?> alias) {
        return new Route(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Route rename(String name) {
        return new Route(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Route rename(Name name) {
        return new Route(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Route rename(Table<?> name) {
        return new Route(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, YearToSecond> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super YearToSecond, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super YearToSecond, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
